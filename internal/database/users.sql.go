// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE users
SET hashed_password = $2
WHERE id = $1
`

type ChangePasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword, arg.ID, arg.HashedPassword)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name, hashed_password, is_superuser)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
)
RETURNING id, created_at, updated_at, name, hashed_password, is_superuser
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Name           string
	HashedPassword string
	IsSuperuser    sql.NullBool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.HashedPassword,
		arg.IsSuperuser,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.HashedPassword,
		&i.IsSuperuser,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name, hashed_password, is_superuser FROM users 
WHERE name = $1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.HashedPassword,
		&i.IsSuperuser,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, name, hashed_password, is_superuser FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.HashedPassword,
			&i.IsSuperuser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getuserFromID = `-- name: GetuserFromID :one
SELECT id, created_at, updated_at, name, hashed_password, is_superuser FROM users
WHERE id = $1
`

func (q *Queries) GetuserFromID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getuserFromID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.HashedPassword,
		&i.IsSuperuser,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const updateToSuper = `-- name: UpdateToSuper :exec
UPDATE users
SET is_superuser = TRUE
WHERE id = $1
`

func (q *Queries) UpdateToSuper(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateToSuper, id)
	return err
}
