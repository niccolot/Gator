// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const bookmarkPost = `-- name: BookmarkPost :one
INSERT INTO user_posts (id, created_at, user_id, post_id)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, user_id, post_id
`

type BookmarkPostParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UserID    uuid.UUID
	PostID    uuid.UUID
}

func (q *Queries) BookmarkPost(ctx context.Context, arg BookmarkPostParams) (UserPost, error) {
	row := q.db.QueryRowContext(ctx, bookmarkPost,
		arg.ID,
		arg.CreatedAt,
		arg.UserID,
		arg.PostID,
	)
	var i UserPost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const getBookmarkedPostsForUser = `-- name: GetBookmarkedPostsForUser :many
SELECT id, created_at, user_id, post_id FROM user_posts
WHERE user_id = $1
`

func (q *Queries) GetBookmarkedPostsForUser(ctx context.Context, userID uuid.UUID) ([]UserPost, error) {
	rows, err := q.db.QueryContext(ctx, getBookmarkedPostsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPost
	for rows.Next() {
		var i UserPost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
